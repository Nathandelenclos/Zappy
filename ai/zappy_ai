#!/bin/python3

import sys
import argparse
import socket
import re

# from main import temp_evo

port = None
team_name = None
ip_server = None

auto_command = []
last_broadcast = []
last_command = None
last_answer = None
mode = None

class Game_data:
    def __init__(self):
        self.map_size_x = 0
        self.map_size_y = 0
        self.available_connection = 0
        self.lvl = 1
        # self.vision = [],
        self.inventory  = {
            "food": None,
            "linemate": None ,
            "deraumere": None ,
            "sibur": None ,
            "mendiane": None ,
            "phiras": None ,
            "thystame": None 
        }

def manHelp():
    print("USAGE:  ./zappy_ai -p port -n name -h machine")
    print("\tport\tis the port number")
    print("\tname\tis the name of the team")
    print("\tmachine\tis the name of the machine; localhost by default")

def Error_man():
    global port, team_name, ip_server

    if len(sys.argv) == 2:
        if sys.argv[1] == "-help":
            manHelp()
            raise SystemExit()
        else:
            raise Exception("Bad arguments\n")
    elif len(sys.argv) == 5 or len(sys.argv) == 7:
        parser = argparse.ArgumentParser(add_help=False)
        parser.add_argument('-p', type=int)
        parser.add_argument('-n', type=str)
        parser.add_argument('-h', type=str)
        args = parser.parse_args()
        port = args.p
        team_name = args.n
        ip_server = args.h
        if team_name == None or port == None:
            raise Exception("Bad arguments\n")
        if ip_server == None:
            ip_server = "127.0.0.1"
    else:
        raise Exception("Bad arguments\n")

def answer_management(data, client_socket):
    global last_broadcast
    if data == "dead":
        print("YOU DIED x)")
        client_socket.close()
        print("Connexion fermée.")
        return (-1)
    else:
        answer = data.split()
        if answer[0] == "message":
            last_broadcast.append(data)
            print(data)
            return(1)
        print(data)
        return (0)

def read_server(client_socket):
    msg = ""
    while (1):
        char_read = client_socket.recv(1)
        if not char_read:
            break
        elif (char_read == b'\n'):
            return (msg)
        else:
            msg += char_read.decode()
    return (msg)

def check_inventory(client_socket, myGameData):
    print("Inventory")
    client_socket.send(("Inventory"+"\n").encode())
    answer = 1
    while (answer != 0):
        data = read_server(client_socket)
        answer = answer_management(data, client_socket)
    clean_string = data.strip("[] ")
    pattern = r"(\w+)\s(\d+)"
    matches = re.findall(pattern, clean_string)
    data = [[name, value] for name, value in matches]
    while (len(data) > 0):
        myGameData.inventory[data[0][0]] = data[0][1]
        data.pop(0)
    # print(myGameData.inventory)

def search_choice(client_socket, data, item):
    add_command = []
    add_command.append("Left")
    add_command.append("Forward")
    add_command.append("Forward")
    # add_command = find_path(data, item) inserer strategie de calcul de chemin pour chercher bouffe
    while (len(add_command) > 0):
        auto_command.append(add_command[0])
        add_command.pop(0)
    while (len(auto_command) > 0):
        command = auto_command[0] + "\n"
        print(command, end="")
        auto_command.pop(0)
        client_socket.send(command.encode())
        answer = 1
        while (answer != 0):
            data = read_server(client_socket)
            answer = answer_management(data, client_socket)
    for broadcast in last_broadcast:
        print(broadcast)

def search_item(client_socket, item, quantity, myGameData):
    global last_command, mode, auto_command
    while (quantity > int(myGameData.inventory[item])):
        print("Look")
        client_socket.send(("Look"+"\n").encode())
        last_command = "Look"
        mode = item
        answer = 1
        while (answer != 0):
            data = read_server(client_socket)
            answer = answer_management(data, client_socket)
        if answer != "ok":
            search_choice(client_socket, data, item)

def action_choice(client_socket, myGameData, data):
    check_inventory(client_socket, myGameData)
    if (int(myGameData.inventory["food"]) < 20):
        search_item(client_socket, "food", 10, myGameData)

def main():
    global auto_command, last_command, last_answer, last_broadcast

    i = 0
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client_socket.connect((ip_server, port))
        print("Connexion au serveur établie.")
        print(read_server(client_socket))
        client_socket.send((team_name+"\n").encode())
        myGameData = Game_data()
        free_places = read_server(client_socket)
        myGameData.available_connection = free_places
        print(free_places)
        map_size = read_server(client_socket).split()
        myGameData.map_size_x = map_size[0]
        myGameData.map_size_y = map_size[1]
        print(map_size[0] + " " + map_size[1])
        while (1):
            if i == 0:
                action_choice(client_socket, myGameData, "")
                i += 1
                continue
            data = read_server(client_socket)
            choice = answer_management(data, client_socket)
            if (choice == 0):
                action_choice(client_socket, myGameData, data)

    except ConnectionRefusedError:
        print("La connexion au serveur a été refusée.")

if __name__ == "__main__":
    try:
        Error_man()
        main()
    except SystemExit:
        exit(0)
    except Exception as error:
        sys.stdout.write(str(error))
        exit(84)
